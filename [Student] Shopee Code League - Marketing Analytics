{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"[Student] Shopee Code League - Marketing Analytics","provenance":[],"mount_file_id":"1RFe9eEqbiOv9kfZqRNmCfLRkrAzmVjyn","authorship_tag":"ABX9TyOalZozg+ML5WWTb77aLaQy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"7aHHi-sxkROW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":527},"executionInfo":{"status":"ok","timestamp":1596613451197,"user_tz":-420,"elapsed":18324,"user":{"displayName":"Hoang Viet Nguyen","photoUrl":"","userId":"00365099228452340445"}},"outputId":"679313ed-e948-4445-f439-428b1f1e3de4"},"source":["!pip install kaggle\n","!mkdir -p ~/.kaggle\n","!cp \"/content/drive/My Drive/kaggle.json\" ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","!kaggle competitions download -c student-shopee-code-league-marketing-analytics\n","!unzip test.csv.zip\n","!unzip train.csv.zip\n","!unzip users.csv.zip"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.6)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.0.1)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.8.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.41.1)\n","Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.15.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.23.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.6/dist-packages (from kaggle) (2020.6.20)\n","Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.24.3)\n","Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.6/dist-packages (from python-slugify->kaggle) (1.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (3.0.4)\n","Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","Downloading test.csv.zip to /content\n","  0% 0.00/940k [00:00<?, ?B/s]\n","100% 940k/940k [00:00<00:00, 63.8MB/s]\n","Downloading sample_submission_0_1.csv to /content\n","  0% 0.00/481k [00:00<?, ?B/s]\n","100% 481k/481k [00:00<00:00, 174MB/s]\n","Downloading train.csv.zip to /content\n","  0% 0.00/1.23M [00:00<?, ?B/s]\n","100% 1.23M/1.23M [00:00<00:00, 173MB/s]\n","Downloading users.csv.zip to /content\n","  0% 0.00/519k [00:00<?, ?B/s]\n","100% 519k/519k [00:00<00:00, 172MB/s]\n","Archive:  test.csv.zip\n","  inflating: test.csv                \n","Archive:  train.csv.zip\n","  inflating: train.csv               \n","Archive:  users.csv.zip\n","  inflating: users.csv               \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dX4l_d5pkdIv","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1596613562655,"user_tz":-420,"elapsed":21027,"user":{"displayName":"Hoang Viet Nguyen","photoUrl":"","userId":"00365099228452340445"}}},"source":["import pandas as pd\n","from sklearn.preprocessing import OneHotEncoder\n","import numpy as np\n","from sklearn.ensemble import GradientBoostingClassifier\n","df_train = pd.read_csv(\"/content/train.csv\")\n","df_test = pd.read_csv(\"/content/test.csv\")\n","df_users = pd.read_csv(\"/content/users.csv\")\n","df_train = df_train.fillna(-1)\n","df_users = df_users.fillna(-1)\n","df_test = df_test.fillna(-1)\n","user_dict = {}\n","for row in df_users.itertuples():\n","    user_dict[row.user_id] = (row.attr_1,row.attr_2,row.attr_3,row.age,row.domain)\n","def get_user_feature(user_id,i):\n","    if user_id in user_dict:\n","        return user_dict[user_id][i]\n","    else:\n","        return -2\n","def fill_ints(data):\n","    if isinstance(data,int):\n","        return data\n","    if data.isnumeric():\n","        return data\n","    else:\n","        return -1\n","def time_to_categorical_series(df,type=\"hour\"):\n","    if type == \"hour\":\n","        return df['date_time'].dt.hour.astype('category')\n","    elif type == \"dayofweek\":\n","        return df['date_time'].dt.dayofweek.astype('category')\n","    elif type == \"month\":\n","        return df['date_time'].dt.month.astype('category')\n","    else:\n","        return None\n","    \n","def time_to_categorical(df):\n","    hour_series = time_to_categorical_series(df,type='hour')\n","    dayofweek_series = time_to_categorical_series(df,type='dayofweek')\n","    month_series = time_to_categorical_series(df,type='month')\n","\n","    df['hour'] = hour_series\n","    df['dayofweek'] = dayofweek_series\n","    df['month'] = month_series\n","cat_features = ['country_code','hour','dayofweek','month','domain']\n","numerical_features = [ 'subject_line_length',\n","       'last_open_day', 'last_login_day', 'last_checkout_day',\n","       'open_count_last_10_days', 'open_count_last_30_days',\n","       'open_count_last_60_days', 'login_count_last_10_days',\n","       'login_count_last_30_days', 'login_count_last_60_days',\n","       'checkout_count_last_10_days', 'checkout_count_last_30_days',\n","       'checkout_count_last_60_days','attr1', 'attr2',\n","       'attr3', 'age']\n","def make_df_features(df,train=None,encoder=None):\n","    df['attr1'] = df['user_id'].apply(lambda x: get_user_feature(x,0))\n","    df['attr2'] = df['user_id'].apply(lambda x: get_user_feature(x,1))\n","    df['attr3'] = df['user_id'].apply(lambda x: get_user_feature(x,2))\n","    df['age'] = df['user_id'].apply(lambda x: get_user_feature(x,3))\n","    df['domain'] = df['user_id'].apply(lambda x: get_user_feature(x,4))\n","    df['date_time'] = pd.to_datetime(df['grass_date'])\n","    df['last_open_day'] = df['last_open_day'].apply(fill_ints)\n","    df['last_login_day'] = df['last_login_day'].apply(fill_ints)\n","    df['last_checkout_day'] = df['last_checkout_day'].apply(fill_ints)\n","    time_to_categorical(df)\n","    cat = df.loc[:,cat_features].values\n","    if train:\n","        encoder = OneHotEncoder(handle_unknown='ignore',sparse=False)\n","        cat = encoder.fit_transform(cat).astype(np.float64)\n","    else:\n","        cat = encoder.transform(cat).astype(np.float64)\n","    val = df.loc[:,numerical_features].values.astype(np.float64)\n","    return np.concatenate([cat,val],axis=1),encoder\n","train_features,encoder = make_df_features(df_train,True)\n","train_labels = df_train['open_flag'].values\n","\n","test_features,_ = make_df_features(df_test,False,encoder=encoder)\n","clf = GradientBoostingClassifier()\n","clf.fit(train_features,train_labels)\n","predictions = clf.predict(test_features)\n","df_test = df_test.drop([col for col in df_test.columns if col!='row_id'],axis=1)\n","df_test['open_flag'] = predictions\n","df_test.to_csv('sub.csv',index=False)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"GuBCWi-0lOKQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1596613568802,"user_tz":-420,"elapsed":6135,"user":{"displayName":"Hoang Viet Nguyen","photoUrl":"","userId":"00365099228452340445"}},"outputId":"35b895e7-8eca-41ed-ba46-7b87db9270ce"},"source":["!kaggle competitions submit -c student-shopee-code-league-marketing-analytics -f sub.csv -m \"Viet\""],"execution_count":5,"outputs":[{"output_type":"stream","text":["Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","100% 426k/426k [00:02<00:00, 155kB/s]\n","Successfully submitted to [Student] Shopee Code League - Marketing Analytics"],"name":"stdout"}]}]}